#!/bin/bash

# Script para executar comandos do CNPJ Downloader com Docker

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Arquivo de compose
DOCKER_COMPOSE_FILE="docker-compose.yml"

# --- Fun√ß√µes Auxiliares ---
show_help() {
    echo -e "${BLUE}CNPJ Downloader - Docker Script${NC}"
    echo ""
    echo "Uso: $0 [COMANDO]"
    echo ""
    echo "Comandos dispon√≠veis:"
    echo "  build            - Constr√≥i as imagens Docker"
    echo "  download         - Baixa e extrai os arquivos de dados"
    echo "  status           - Verifica o status dos arquivos baixados"
    echo "  import-parquet   - Converte os arquivos extra√≠dos para Parquet"
    echo "  list [tipo]      - Lista arquivos extra√≠dos (filtra por tipo, ex: 'empresas')"
    echo "  clean            - Limpa todos os dados (downloads, extra√≠dos, parquet)"
    echo "  shell            - Abre um shell interativo no container principal"
    echo "  stop             - Para todos os servi√ßos"
    echo "  all              - Executa o pipeline completo: download > import-parquet"
    echo "  help             - Mostra esta mensagem de ajuda"
}

build_images() {
    echo -e "${YELLOW}üî® Construindo imagens Docker...${NC}"
    docker-compose -f $DOCKER_COMPOSE_FILE build
    echo -e "${GREEN}‚úÖ Imagens constru√≠das com sucesso!${NC}"
}

run_download() {
    echo -e "${YELLOW}üì• Baixando e extraindo dados...${NC}"
    docker-compose -f $DOCKER_COMPOSE_FILE run --rm cnpj-downloader
    echo -e "${GREEN}‚úÖ Download e extra√ß√£o conclu√≠dos!${NC}"
}

run_status() {
    echo -e "${YELLOW}üìä Verificando status...${NC}"
    docker-compose -f $DOCKER_COMPOSE_FILE run --rm cnpj-manager python cnpj_manager.py status
}

import_parquet() {
    echo -e "${YELLOW}üì¶ Convertendo dados para Parquet...${NC}"
    # Garante que o servi√ßo esteja de p√© e com a imagem mais recente
    docker-compose -f $DOCKER_COMPOSE_FILE up --build -d cnpj-parquet
    # Executa o script de importa√ß√£o dentro do container que est√° rodando
    docker-compose -f $DOCKER_COMPOSE_FILE exec cnpj-parquet python import_to_parquet.py
    echo -e "${GREEN}‚úÖ Convers√£o para Parquet conclu√≠da! Arquivos em ./parquet.${NC}"
}

run_list() {
    echo -e "${YELLOW}üîé Listando arquivos para o tipo: $1...${NC}"
    docker-compose -f $DOCKER_COMPOSE_FILE run --rm cnpj-manager python cnpj_manager.py list "$1"
}

run_clean() {
    echo -e "${YELLOW}üóëÔ∏è  Limpando todos os dados...${NC}"
    docker-compose -f $DOCKER_COMPOSE_FILE run --rm cnpj-manager python cnpj_manager.py clean-all
    # Remove tamb√©m os arquivos parquet
    if [ -d "parquet" ]; then
        rm -rf parquet/*
        echo -e "${YELLOW}Diret√≥rio 'parquet' limpo.${NC}"
    fi
    echo -e "${GREEN}‚úÖ Limpeza conclu√≠da!${NC}"
}

run_shell() {
    echo -e "${YELLOW}üêö Abrindo shell no container 'cnpj-manager'...${NC}"
    docker-compose -f $DOCKER_COMPOSE_FILE run --rm cnpj-manager /bin/bash
}

run_stop() {
    echo -e "${YELLOW}üõë Parando todos os servi√ßos...${NC}"
    docker-compose -f $DOCKER_COMPOSE_FILE down
    echo -e "${GREEN}‚úÖ Servi√ßos parados!${NC}"
}

# --- Fun√ß√£o Principal ---
main() {
    if ! command -v docker &> /dev/null || ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}‚ùå Docker e/ou Docker Compose n√£o est√£o instalados. Por favor, instale-os para continuar.${NC}"
        exit 1
    fi

    COMMAND=$1
    shift || true # Remove o comando da lista de argumentos

    case "$COMMAND" in
        build) build_images ;;
        download) run_download ;;
        status) run_status ;;
        import-parquet) import_parquet ;;
        list)
            if [ -z "$1" ]; then
                echo -e "${RED}Erro: Especifique o tipo de arquivo para listar.${NC}"
                exit 1
            fi
            run_list "$1"
            ;;
        clean) run_clean ;;
        shell) run_shell ;;
        stop) run_stop ;;
        all)
            echo -e "${BLUE}üöÄ Executando pipeline completo...${NC}"
            run_download
            import_parquet
            echo -e "${GREEN}üéâ Pipeline conclu√≠do com sucesso!${NC}"
            ;;
        help|--help|-h|"")
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Comando inv√°lido: $COMMAND${NC}"
            show_help
            exit 1
            ;;
    esac
}

main "$@" 