# Script para executar comandos do CNPJ Downloader com Docker

# --- Configura√ß√£o ---
$DockerComposeFile = "docker-compose.yml"

# --- Fun√ß√µes Auxiliares ---
function Show-Help {
    Write-Host "CNPJ Downloader - Docker Script" -ForegroundColor Blue
    Write-Host ""
    Write-Host "Uso: .\\docker-run.ps1 [COMANDO]"
    Write-Host ""
    Write-Host "Comandos dispon√≠veis:"
    Write-Host "  build            - Constr√≥i as imagens Docker"
    Write-Host "  download         - Baixa e extrai os arquivos de dados"
    Write-Host "  status           - Verifica o status dos arquivos baixados"
    Write-Host "  import-parquet   - Converte os arquivos extra√≠dos para Parquet"
    Write-Host "  list [tipo]      - Lista arquivos extra√≠dos (filtra por tipo, ex: 'empresas')"
    Write-Host "  clean            - Limpa todos os dados (downloads, extra√≠dos, parquet)"
    Write-Host "  shell            - Abre um shell interativo no container principal"
    Write-Host "  stop             - Para todos os servi√ßos"
    Write-Host "  all              - Executa o pipeline completo: download > import-parquet"
    Write-Host "  help             - Mostra esta mensagem de ajuda"
}

function Build-Images {
    Write-Host "üî® Construindo imagens Docker..." -ForegroundColor Yellow
    docker-compose -f $DockerComposeFile build
    Write-Host "‚úÖ Imagens constru√≠das com sucesso!" -ForegroundColor Green
}

function Run-Download {
    Write-Host "üì• Baixando e extraindo dados..." -ForegroundColor Yellow
    docker-compose -f $DockerComposeFile run --rm cnpj-downloader
    Write-Host "‚úÖ Download e extra√ß√£o conclu√≠dos!" -ForegroundColor Green
}

function Run-Status {
    Write-Host "üìä Verificando status..." -ForegroundColor Yellow
    docker-compose -f $DockerComposeFile run --rm cnpj-manager python cnpj_manager.py status
}

function Import-Parquet {
    Write-Host "üì¶ Convertendo dados para Parquet..." -ForegroundColor Yellow
    # Garante que o servi√ßo esteja de p√© e com a imagem mais recente
    docker-compose -f $DockerComposeFile up --build -d cnpj-parquet
    # Executa o script de importa√ß√£o dentro do container que est√° rodando
    docker-compose -f $DockerComposeFile exec cnpj-parquet python import_to_parquet.py
    Write-Host "‚úÖ Convers√£o para Parquet conclu√≠da! Arquivos em ./parquet." -ForegroundColor Green
}

function Run-List ($type) {
    Write-Host "üîé Listando arquivos para o tipo: $type..." -ForegroundColor Yellow
    docker-compose -f $DockerComposeFile run --rm cnpj-manager python cnpj_manager.py list "$type"
}

function Run-Clean {
    Write-Host "üóëÔ∏è  Limpando todos os dados..." -ForegroundColor Yellow
    docker-compose -f $DockerComposeFile run --rm cnpj-manager python cnpj_manager.py clean-all
    if (Test-Path -Path "parquet") {
        Remove-Item -Recurse -Force parquet/*
        Write-Host "Diret√≥rio 'parquet' limpo." -ForegroundColor Yellow
    }
    Write-Host "‚úÖ Limpeza conclu√≠da!" -ForegroundColor Green
}

function Run-Shell {
    Write-Host "üêö Abrindo shell no container 'cnpj-manager'..." -ForegroundColor Yellow
    docker-compose -f $DockerComposeFile run --rm cnpj-manager /bin/bash
}

function Run-Stop {
    Write-Host "üõë Parando todos os servi√ßos..." -ForegroundColor Yellow
    docker-compose -f $DockerComposeFile down
    Write-Host "‚úÖ Servi√ßos parados!" -ForegroundColor Green
}

# --- Fun√ß√£o Principal ---
function Main {
    param($Command, $Args)

    if (-not (Get-Command docker -ErrorAction SilentlyContinue) -or -not (Get-Command docker-compose -ErrorAction SilentlyContinue)) {
        Write-Host "‚ùå Docker e/ou Docker Compose n√£o est√£o instalados. Por favor, instale-os para continuar." -ForegroundColor Red
        exit 1
    }

    switch ($Command) {
        "build"          { Build-Images }
        "download"       { Run-Download }
        "status"         { Run-Status }
        "import-parquet" { Import-Parquet }
        "list"           {
            if ($Args.Count -eq 0) {
                Write-Host "Erro: Especifique o tipo de arquivo para listar." -ForegroundColor Red
                exit 1
            }
            Run-List $Args[0]
        }
        "clean"          { Run-Clean }
        "shell"          { Run-Shell }
        "stop"           { Run-Stop }
        "all"            {
            Write-Host "üöÄ Executando pipeline completo..." -ForegroundColor Blue
            Run-Download
            Import-Parquet
            Write-Host "üéâ Pipeline conclu√≠do com sucesso!" -ForegroundColor Green
        }
        default {
            if ($null -eq $Command -or "" -eq $Command -or "help" -eq $command) {
                Show-Help
            } else {
                Write-Host "‚ùå Comando inv√°lido: $Command" -ForegroundColor Red
                Show-Help
                exit 1
            }
        }
    }
}

# Executa a fun√ß√£o principal, passando os argumentos do script
Main $args[0] $args[1..($args.Length-1)] 